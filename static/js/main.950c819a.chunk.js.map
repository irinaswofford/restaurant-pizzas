{"version":3,"sources":["compoents/Toppings.js","App.js","serviceWorker.js","index.js"],"names":["Toppings","props","getData","fetch","then","response","json","rawDataFromAPI_Pizzas","ObjectLiteral_Result","forEach","pizza","index","list_of_toppings_for_a_pizza","STRING_list_of_toppings_for_a_pizza","colon","topping","replace","value_topping_combination_count","resultArray","toppingCombinationString","obj","push","sort","a","b","bandA","occurrenceCount","bandB","comparison","slice","setState","state","toppings","bind","this","Container","className","Row","Col","sm","md","map","item","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iUA6IeA,E,kDAzIX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAYVC,QAAU,WACNC,MAAM,eACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAIF,IAAIC,EAAuB,GAM3BD,EAAsBE,SAAQ,SAACC,EAAOC,GAGlC,IAAIC,EAA+BF,EAAK,SAGpCG,EAAsC,GACtCC,EAAQ,GAQZ,GAPAF,EAA6BH,SAAQ,SAACM,EAASJ,GAC3CI,GAAWA,GAAW,IAAIC,QAAQ,KAAM,KACxCH,GAAuCC,EAAQC,EAC/CD,EAAQ,QAIND,KAAuCL,EAGxC,CAED,IAAIS,EAAkCT,EAAqBK,GAC3DI,IACAT,EAAqBK,GAAuCI,OAN5DT,EAAqBK,GAAuC,KAapE,IAAIK,EAAc,GAClB,IAAK,IAAIC,KAA4BX,EAAsB,CACvD,IACIY,EAAM,CACN,mBAAsBD,EACtB,gBAHkBX,EAAqBW,IAK3CD,EAAYG,KAAKD,GAIrBF,EAAYI,MAAK,SAACC,EAAGC,GAEjB,IAAMC,EAAQF,EAAEG,gBACVC,EAAQH,EAAEE,gBAEZE,EAAa,EAMjB,OALIH,EAAQE,EACRC,GAAc,EACPH,EAAQE,IACfC,EAAa,GAEVA,KAIXV,EAAcA,EAAYW,MAAM,EAAG,IAGnC,EAAKC,SAAS,CACVZ,YAAaA,QAnFzB,EAAKa,MAAQ,CACTC,SAAU,GACVd,YAAa,IAEjB,EAAKhB,QAAU,EAAKA,QAAQ+B,KAAb,gBANA,E,gEAUfC,KAAKhC,Y,+BAkFL,OACI,6BACI,kBAACiC,EAAA,EAAD,CAAWC,UAAU,mBACjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKJ,UAAU,WAA/B,4CAKJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,sBAA7B,QAGA,kBAACE,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,sBAA7B,uBAGA,kBAACE,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,sBAA7B,gBAKHF,KAAKH,MAAMb,YAAYuB,KAAI,SAACC,EAAM/B,GAE/B,OACI,kBAAC0B,EAAA,EAAD,CAAKM,IAAKhC,GACN,kBAAC2B,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,uBACzB,8BAAOzB,EAAQ,IAEnB,kBAAC2B,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,uBACzB,0BAAMA,UAAU,aAAhB,IAA8BM,EAAI,qBAEtC,kBAACJ,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,uBACzB,8BAAOM,EAAI,4B,GA9HxBE,IAAMC,WCUdC,MARf,WACE,OACE,yBAAKV,UAAU,OACf,kBAAC,EAAD,QCKgBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.950c819a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nclass Toppings extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toppings: [],\r\n            resultArray: []\r\n        }\r\n        this.getData = this.getData.bind(this);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    };\r\n\r\n    getData = () => {\r\n        fetch('pizzas.json')\r\n            .then(response => response.json())\r\n            .then(rawDataFromAPI_Pizzas => {\r\n                //console.log('Data from Api', rawDataFromAPI_Pizzas);\r\n\r\n                // rawDataFromAPI_Pizzas = array of PIZZAS\r\n                let ObjectLiteral_Result = {\r\n                    // \"mozzarella_cheese;bacon;beef;onions;pineapple\": 50, // occurrences\r\n                    // \"sausage;pepperoni\": 6\r\n                };\r\n\r\n                // ALL THE PIZZAS\r\n                rawDataFromAPI_Pizzas.forEach((pizza, index) => {\r\n\r\n                    // un-pack toppings from pizza\r\n                    let list_of_toppings_for_a_pizza = pizza[\"toppings\"];\r\n\r\n                    // make list into string\r\n                    let STRING_list_of_toppings_for_a_pizza = \"\";\r\n                    let colon = \"\";\r\n                    list_of_toppings_for_a_pizza.forEach((topping, index) => {\r\n                        topping = (topping || \"\").replace(/ /g, \" \");\r\n                        STRING_list_of_toppings_for_a_pizza += colon + topping;\r\n                        colon = \", \";\r\n                    });\r\n\r\n                    // work \r\n                    if (!(STRING_list_of_toppings_for_a_pizza in ObjectLiteral_Result)) {\r\n                        ObjectLiteral_Result[STRING_list_of_toppings_for_a_pizza] = 1;\r\n                    }\r\n                    else {\r\n\r\n                        let value_topping_combination_count = ObjectLiteral_Result[STRING_list_of_toppings_for_a_pizza];\r\n                        value_topping_combination_count++;\r\n                        ObjectLiteral_Result[STRING_list_of_toppings_for_a_pizza] = value_topping_combination_count;\r\n                    }\r\n                });\r\n\r\n                //console.log(\"ObjectLiteral_Result\", ObjectLiteral_Result);\r\n\r\n                // create result array from result dictionary\r\n                let resultArray = [];\r\n                for (let toppingCombinationString in ObjectLiteral_Result) {\r\n                    let occurrenceCount = ObjectLiteral_Result[toppingCombinationString];\r\n                    let obj = {\r\n                        \"toppingCombination\": toppingCombinationString,\r\n                        \"occurrenceCount\": occurrenceCount\r\n                    };\r\n                    resultArray.push(obj);\r\n                }\r\n\r\n                // sort resault array\r\n                resultArray.sort((a, b) => {\r\n                    // Use toUpperCase() to ignore character casing\r\n                    const bandA = a.occurrenceCount;\r\n                    const bandB = b.occurrenceCount;\r\n\r\n                    let comparison = 0;\r\n                    if (bandA > bandB) {\r\n                        comparison = -1;\r\n                    } else if (bandA < bandB) {\r\n                        comparison = 1;\r\n                    }\r\n                    return comparison;\r\n                });\r\n\r\n                // only first 20\r\n                resultArray = resultArray.slice(0, 20);\r\n\r\n                // print rersults\r\n                this.setState({\r\n                    resultArray: resultArray\r\n                })\r\n\r\n            }); //end fetch callback\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container className=\"containerMenuUI\">\r\n                    <Row>\r\n                        <Col sm=\"12\" md=\"12\" className=\"heading\">\r\n                            Most popular pizza topping combinations\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col sm=\"1\" md=\"1\" className=\"containerMenuUI_th\">\r\n                            Rank\r\n                        </Col>\r\n                        <Col sm=\"7\" md=\"7\" className=\"containerMenuUI_th\">\r\n                            Topping Combination\r\n                        </Col>\r\n                        <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_th\">\r\n                            Occurrences\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {this.state.resultArray.map((item, index) => {\r\n\r\n                        return (\r\n                            <Row key={index}>\r\n                                <Col sm=\"1\" md=\"1\" className=\"containerMenuUI_col\">\r\n                                    <span>{index + 1}</span>\r\n                                </Col>\r\n                                <Col sm=\"7\" md=\"7\" className=\"containerMenuUI_col\">\r\n                                    <span className=\"breakWord\"> {item[\"toppingCombination\"]}</span>\r\n                                </Col>\r\n                                <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_col\">\r\n                                    <span>{item[\"occurrenceCount\"]}</span>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        );\r\n\r\n                    })}\r\n\r\n                </Container>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Toppings;\r\n","import React from 'react';\nimport './App.css';\nimport Toppings from './compoents/Toppings';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Toppings />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}